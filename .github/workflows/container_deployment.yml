
name: container deployment

on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'Deployment environment'
        options:
          - prod
          - test
        required: true
      version:
        description: 'application version'
        required: true

env:
  ARM_CLIENT_SECRET: ${{  secrets.ARM_CLIENT_SECRET  }}
  ARM_SUBSCRIPTION_ID: ${{  secrets.ARM_SUBSCRIPTION_ID  }}
  ARM_TENANT_ID: ${{  secrets.ARM_TENANT_ID  }}
  ARM_CLIENT_ID: ${{  secrets.ARM_CLIENT_ID  }}

jobs:
  
  deploy_on_azure_container_service:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: configure client secret
      run: export ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET
    
    - name: configure subscription id
      run: export ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID
    
    - name: configure tenant id
      run: export ARM_TENANT_ID=$ARM_TENANT_ID

    - name: configure client id
      run: export ARM_CLIENT_ID=$ARM_CLIENT_ID

    - name: Initialize Terraform
      working-directory: ./containerization/infrastructure/deploy-container
      run: terraform init

    - name: creation of workspace (if workspace does not exist)
      run: terraform workspace new ${{  github.event.inputs.env  }}
      continue-on-error: true


    - name: check workspace
      run: terraform workspace select ${{  github.event.inputs.env  }}

    - name: check workspace
      run: terraform workspace show

#    - name: Try terraform plan
#      working-directory: ./containerization/infrastructure/deploy-container
#      run: terraform plan -var application_version=${{ github.event.inputs.version }}

#    - name: Deploy on azure container service
#      working-directory: ./containerization/infrastructure/deploy-container
#      run: terraform apply -var application_version=${{ github.event.inputs.version }} -auto-approve